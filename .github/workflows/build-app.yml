name: Build Application

on:
  workflow_call:
    inputs:
      version:
        required: false
        type: string
        default: ''
    secrets:
      GH_TOKEN:
        required: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: linux
          - os: windows-latest
            platform: win
            artifact_name: windows
          - os: macos-latest
            platform: mac
            artifact_name: macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        always-auth: false

    - name: Install dependencies
      run: npm ci

    - name: Fix Rollup dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        npm rebuild rollup
        npm install @rollup/rollup-linux-x64-gnu
        npm cache clean --force
        npm ci

    - name: Fix Rollup dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        npm rebuild rollup
        npm install @rollup/rollup-win32-x64-msvc
        npm cache clean --force
        npm ci

    - name: Fix Rollup dependencies (Mac)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        npm rebuild rollup
        echo "Detected architecture: $(node -e "console.log(process.arch)")"
        if node -e "console.log(process.arch)" | grep -q "arm64"; then
          echo "Installing ARM64 version for Mac"
          npm install @rollup/rollup-darwin-arm64
        else
          echo "Installing x64 version for Mac"
          npm install @rollup/rollup-darwin-x64
        fi
        npm cache clean --force
        npm ci

    - name: Set version
      shell: bash
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          npm run set-version "${{ inputs.version }}"
        else
          npm run set-version
        fi

    - name: Build application
      shell: bash
      run: |
        # Try standard build first
        npm run build || {
          echo "Standard build failed, trying alternative approach..."
          rm -rf node_modules package-lock.json
          npm install
          npm run build
        }
      env:
        # Force npm to use the correct platform for optional dependencies
        npm_config_platform: ${{ matrix.platform }}
        npm_config_arch: x64

    - name: Build Electron app
      run: npm run build:${{ matrix.platform }}
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-build
        path: |
          dist-electron/*.exe
          dist-electron/*.dmg
          dist-electron/*.zip
          dist-electron/*.AppImage
          dist-electron/*.tar.gz
          dist-electron/*.deb
          dist-electron/*.rpm
        retention-days: 30
